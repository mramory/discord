services:
  postgres:
    image: postgres:14
    container_name: db_container
    restart: unless-stopped
    hostname: postgres-db
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql_14/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: --auth=scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  back:
    container_name: back_container
    image: back_prod_image:1.0
    restart: unless-stopped
    environment:
      DATABASE_HOST: postgres
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV}
    build: 
      context: back
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:9200"
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  front:
    container_name: front_container
    image: front_prod_image:1.0
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      BACKEND_URL: http://back:9200
    build: 
      context: front
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:3000"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data: